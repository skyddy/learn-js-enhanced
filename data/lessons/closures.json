{
  "id": "closures",
  "title": "Closures",
  "description": "Understanding JavaScript closures and their practical applications",
  "content": "# JavaScript Closures\n\nA closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function.\n\n## Key Concepts\n\n1. **Lexical Scoping**\n   - Inner functions have access to variables in their outer scope\n   - This access persists even after the outer function has returned\n\n2. **Data Privacy**\n   - Closures can be used to create private variables and methods\n   - Useful for encapsulation and the module pattern\n\n3. **State Preservation**\n   - Closures can maintain state between function calls\n   - Each closure references a different version of the outer variables\n\n## Common Use Cases\n\n1. Factory Functions\n2. Event Handlers\n3. Partial Application\n4. Module Pattern\n\nTry the example below to see closures in action!",
  "code": {
    "html": "<div class=\"counter\">\n  <h2>Counter</h2>\n  <div class=\"controls\">\n    <button id=\"decrementBtn\">-</button>\n    <span id=\"count\">0</span>\n    <button id=\"incrementBtn\">+</button>\n  </div>\n</div>",
    "css": ".counter {\n  text-align: center;\n  padding: 2rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n}\n\n.controls {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  margin-top: 1rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  border: none;\n  background: #007bff;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n#count {\n  font-size: 2rem;\n  font-weight: bold;\n  min-width: 4rem;\n}",
    "js": "// Create a counter using closures\n// The counter should:\n// 1. Keep track of the count\n// 2. Provide increment and decrement functions\n// 3. Maintain private state\n\nfunction createCounter() {\n  // Your code here\n}\n\n// Initialize the counter\nconst counter = createCounter();\n\n// Get DOM elements\nconst decrementBtn = document.getElementById('decrementBtn');\nconst incrementBtn = document.getElementById('incrementBtn');\nconst countDisplay = document.getElementById('count');\n\n// Add event listeners\ndecrementBtn.addEventListener('click', () => {\n  // Your code here\n});\n\nincrementBtn.addEventListener('click', () => {\n  // Your code here\n});"
  },
  "solution": {
    "html": "<div class=\"counter\">\n  <h2>Counter</h2>\n  <div class=\"controls\">\n    <button id=\"decrementBtn\">-</button>\n    <span id=\"count\">0</span>\n    <button id=\"incrementBtn\">+</button>\n  </div>\n</div>",
    "css": ".counter {\n  text-align: center;\n  padding: 2rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  font-family: sans-serif;\n  background: #f8f9fa;\n}\n\n.controls {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  margin-top: 1rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  border: none;\n  background: #007bff;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\nbutton:hover {\n  background: #0056b3;\n}\n\nbutton:active {\n  transform: scale(0.98);\n}\n\n#count {\n  font-size: 2rem;\n  font-weight: bold;\n  min-width: 4rem;\n  color: #343a40;\n}",
    "js": "// Create a counter using closures\nfunction createCounter(initialValue = 0) {\n  // Private state\n  let count = initialValue;\n  \n  // Return an object with methods\n  return {\n    increment() {\n      count += 1;\n      return count;\n    },\n    decrement() {\n      count -= 1;\n      return count;\n    },\n    getCount() {\n      return count;\n    }\n  };\n}\n\n// Initialize the counter\nconst counter = createCounter();\n\n// Get DOM elements\nconst decrementBtn = document.getElementById('decrementBtn');\nconst incrementBtn = document.getElementById('incrementBtn');\nconst countDisplay = document.getElementById('count');\n\n// Function to update display\nfunction updateDisplay() {\n  countDisplay.textContent = counter.getCount();\n  console.log('Counter updated:', counter.getCount());\n}\n\n// Add event listeners\ndecrementBtn.addEventListener('click', () => {\n  counter.decrement();\n  updateDisplay();\n});\n\nincrementBtn.addEventListener('click', () => {\n  counter.increment();\n  updateDisplay();\n});\n\n// Log initial state\nconsole.log('Counter initialized:', counter.getCount());"
  }
}